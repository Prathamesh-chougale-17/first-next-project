to install the package, run the following command in the terminal:
```
npx create-next-app@latest first-next-project
```
This will create a new folder called first-next-project and install all the necessary packages in it.

Server Side Rendering
This is a technique that allows the server to render the page and send it to the client. The client will then be able to see the page without having to wait for the JavaScript to load. This is a great way to improve the performance of your website.

Static Site Generation
This is a technique that allows you to generate static pages for your website. This is a great way to improve the performance of your website.

As default in fetch function there is default set of chaching the data. So we need to set the cache to no-cache to get the latest data from the server if and only if data is dyanamic.

should add
@tailwind base;
@tailwind components;
@tailwind utilities;

for rendering the tailwind css in the browser

daisy ui is a tailwind css component library that is easy to use and highly customizable. It is built on top of tailwind css and comes with a lot of ready to use components, such as buttons, forms, modals, cards, etc.

To install daisy ui, run the following command in your terminal:
npm i -D daisyui

Then, add the following line to your tailwind.config.js file:
plugins: [require('daisyui')],

to add the theme to your project via daisy ui, add the following line to your tailwind.config.js file:
we have added the theme as a plugin to our tailwind.config.js file
 data-theme="light" to the html tag in the layout.tsx file

Special files in nextjs

1 page.tsx 
info: this file is used to render the page in the browser

2 layout.tsx
info: this file is used to render the layout of the page in the browser

3 loading.tsx
info: this file is used to render the loading page in the browser

4 route.tsx
this file to creating api's

5 not-found.tsx
this file is used to render the 404/custom page in the browser

5 error.tsx
this file is to handle general/custom error in the browser

[name] make a dyanmic route in nextjs

[...slug] make a dyanmic route inside a folder that array of string which read to multiple pages inside browers

[[...slug]] make a dyanmic route inside a folder that array of array of string which read to multiple pages inside browers but it also route the inital page where it is made

for a query search in nextjs
we use props:
interface Props {
  searchParams: { sortOrder: string };
}

layout.tsx

to make change in entire project we use layout.tsx file
majorly used for navbar and footer
and give general css to classes or browers

Link:
info:
1. it only downloads the targeted page and not the entire page
2. it Pre-fetches links that are in the viewport during idle time
3. it caches the page for faster navigation on client

to redirect from router we use router from next/navigation and push the url to the router{mostly used for login and logout pages}

Loading:
for showing the loading page we have two ways
1. suspense
info: it is used to show the loading page when the page is loading and is best for showing the component loading.

2 loading.tsx
info: it is used to show the loading page when the page is loading and is best for showing the page loading and UI.It should be added next to the page where we want to render loading page.

use components in browers to check how the loading is working

not-found.tsx:
info: it is used to show the 404 page when the page is not found and is best for showing the page not found and UI.It should be added next to the page where we want to render 404 page.

and notFound(); is used to show the 404 page in the browser

error.tsx:
info: it is used to show the error page when the page is not found and is best for showing the page not found and UI.It should be added next to the page where we want to render error page.
required : to 'use client' in top of the file

//*** The Special File in nextjs first render the local file first and if it is not present locally then it renders global file ***//

//*** If we wanna handle html source file we use page file whereas if we wanna handle the http request then we use route file ***//

in api we have learned to pass api thought the route file and handle the api request and response

/*for validation of data we use zod in schema.ts*/
export the object from the schema file for validation

to connect the database we use prisma
and to connect to mysql we use command : npx prisma migrate dev it directly connect to the database
and if we have to change in colomn we could do it by changing the schema.prisma file and then run the command : npx prisma migrate dev

and to connect to mongodb we use command : npx prisma db push

To use prisma in next js first search "prisma next clientprisma" on google we will get the code in first site

copy the code and paste in the file prisma/client.ts

to add the data in sql via prisma we use the following code in post function

/*** for and table first and model in schema.prisma and then run 'npx prisma migrate dev' ***/

const users = await prisma.product.create({
  data: {
    name: 'product 1',
    price: 100,
    image: '/images/product1.jpg',
    brand: 'brand 1',
    category: 'category 1',
    countInStock: 10,
    description: 'description 1',
  },
})

and the error handling should be done in just imidiate below the code

my google provider credencial:

Client ID:   718637036839-oo105d03ltmq9f6quj94n9se2fcrsvqc.apps.googleusercontent.com

Client secret:   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

Creation date : 30 September 2023 at 13:35:20 GMT+5

Cloudinary:
command to install: npm i next-cloudinary
after installing the we have to set env in .env file and then create a new folder for cloudinary 
***need some practise its simple***

Next-auth:
command to install: npm i next-auth
ref:
https://next-auth.js.org/configuration/initialization#route-handlers-app

to use next-auth we have to create a file in pages/api/auth/[...nextauth].ts
and then we have to add the code in the file which i have provided link in above
we can also add the provider in the file

to check the token after signing by the provider i have created the token in auth folder so we can see the info of person that have logged in.

middleware.ts should be created in project directory and not in app folder
info: middleware redirect the user if the user is not loged with his account to view any vital information


/****** Adapter ******/
info: it is used to connect the database with next-auth
command: npm i @next-auth/prisma-adapter
we have to create a file in pages/api/auth/[...nextauth].ts
and then we have to add the code in the file which i have provided link in from env file
*dont forget to add strategy as 'jwt' in [...nextauth].ts file*

/****** credencial ******/
It has nothing much to but it is used to store the credencial of the user in the database

/****** react-email ******/
it can be downloaded via npx create-email@latest but 
we have created manually and it is working fine
command to run:npm run preview-email 

/******** @ *********/
it is used to import the file from the root directory

*** client component cannot be async***

/*********************/
/*** error section ***/
so if error comes as : SyntaxError: Unexpected token } in JSON at position 41
then it is because of the json file is not in proper format in postman or while sending the data

While generating the prisma migrate make sure that project should not be running